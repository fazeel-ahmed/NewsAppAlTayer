//
//  NewsViewController.swift
//  NewsAppAlTayer
//
//  Created by Fazeel Ahmed on 7/9/20.
//  Copyright (c) 2020 Sun and Sand Sports LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import LinearProgressBarMaterial

protocol RecentSearchResultProtocol: NSObjectProtocol {
    func recentSearchQuerySelected(query: String)
}

protocol NewsDisplayLogic: class
{
    func displayArticles(viewModel: News.Articles.ViewModel)
}

class NewsViewController: UIViewController, NewsDisplayLogic
{
    var interactor: NewsBusinessLogic?
    var router: (NSObjectProtocol & NewsRoutingLogic & NewsDataPassing)?
    
    var displayedArticles: [News.Articles.ViewModel.DisplayedDocs] = []
    let  linearBar = LinearProgressBar()
    var request = News.Articles.Request()
    
    fileprivate(set) var currentPageIndex: Int = 0
    
    private let searchResultsController = Storyboard.recentSearchViewController.viewController as! RecentSearchResultViewController
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = NewsInteractor()
        let presenter = NewsPresenter()
        let router = NewsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setUpTableView () {
        tableView.register(UINib.init(nibName: NewsListCell.name, bundle: nil),forCellReuseIdentifier: NewsListCell.name)
        
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    private func addSearchResultsView() {
        addChild(searchResultsController)
        view.addSubview(searchResultsController.view)
        searchResultsController.view.translatesAutoresizingMaskIntoConstraints = false
        searchResultsController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        searchResultsController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        searchResultsController.view.topAnchor.constraint(equalTo: searchBar.bottomAnchor).isActive = true
        searchResultsController.view.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.4).isActive = true
        searchResultsController.view.isHidden = true
        searchResultsController.delegate = self
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        linearBar.backgroundProgressBarColor = .gray
        linearBar.progressBarColor = .yellow
        setUpTableView()
        request.query = "Singapore";
        fetchNews()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fetchNews()
    {
        linearBar.startAnimation()
        interactor?.getArticles(request: request)
    }
    
    func displayArticles(viewModel: News.Articles.ViewModel)
    {
        linearBar.stopAnimation()
        print(viewModel)
        
        if request.freshRequest {
            self.displayedArticles = viewModel.displayedArticles
        }
        else {
            self.displayedArticles.append(contentsOf: viewModel.displayedArticles)
        }
        tableView.reloadData()
    }
}

extension NewsViewController : UITableViewDelegate , UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.displayedArticles.count
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: NewsListCell.name, for: indexPath) as! NewsListCell
        cell.configureCell(model: self.displayedArticles[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.dataStore?.article = self.displayedArticles[indexPath.row]
        self.router?.routeToDetails(segue: nil)
    }
    
}

extension NewsViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        refresh()
        searchBar.resignFirstResponder()
    }
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        searchResultsController.view.isHidden = true
    }
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchResultsController.view.isHidden = !RecentSearchDataStore.instance.hasRecentQueries
        searchResultsController.reloadRecentSearches()
    }
}

extension NewsViewController: RecentSearchResultProtocol {
    func recentSearchQuerySelected(query: String) {
        searchBar.text = query
        refresh()
        searchBar.resignFirstResponder()
    }
}

extension NewsViewController : UIScrollViewDelegate {
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        
        let currentOffset = scrollView.contentOffset.y
        let maximumOffset = scrollView.contentSize.height - scrollView.frame.size.height
        
        if maximumOffset - currentOffset <= -0.5 {
            if (linearBar.isAnimationRunning == false) {
                currentPageIndex = request.page
                loadMore()
                linearBar.startAnimation()
            }
        }
    }
}

// MARK: - Pageable

extension NewsViewController {
    
    func refresh() {
        request.page = 0
        request.query = searchBar.text ?? ""
        request.freshRequest = true
        interactor?.getArticles(request: request)
    }
    
    func loadMore() {
        request.page = currentPageIndex + 1
        request.freshRequest = false
        fetchNews()
    }
}
